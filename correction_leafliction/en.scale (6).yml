---

comment: ''
introduction_md: |
  - Remain polite, courteous, respectful and constructive
  throughout the evaluation process. The well-being of the community
  depends on it.

  - Identify with the person (or the group) evaluated the eventual
  dysfunctions of the work. Take the time to discuss
  and debate the problems you have identified.

  - You must consider that there might be some difference in how your
  peers might have understood the project's instructions and the
  scope of its functionalities. Always keep an open mind and grade
  him/her as honestly as possible. The pedagogy is valid only and
  only if peer-evaluation is conducted seriously.


disclaimer_md: ''

guidelines_md: |
  - Only grade the work that is in the student or group's
  GiT repository.

  - Double-check that the GiT repository belongs to the student
  or the group. Ensure that the work is for the relevant project
  and also check that "git clone" is used in an empty folder.

  - Check carefully that no malicious aliases was used to fool you
  and make you evaluate something other than the content of the
  official repository.

  - To avoid any surprises, carefully check that both the evaluating
  and the evaluated students have reviewed the possible scripts used
  to facilitate the grading.

  - If the evaluating student has not completed that particular
  project yet, it is mandatory for this student to read the
  entire subject prior to starting the defence.

  - Use the flags available on this scale to signal an empty repository,
  non-functioning program, a norm error, cheating etc. In these cases,
  the grading is over and the final grade is 0 (or -42 in case of
  cheating). However, with the exception of cheating, you are
  encouraged to continue to discuss your work (even if you have not
  finished it) in order to identify any issues that may have caused
  this failure and avoid repeating the same mistake in the future.
  
  - Remember that for the duration of the defence, no segfault,
  no other unexpected, premature, uncontrolled or unexpected
  termination of the program, else the final grade is 0. Use the
  appropriate flag. 
  You should never have to edit any file except the configuration file if it exists.
  If you want to edit a file, take the time to explicit the reasons with the 
  evaluated student and make sure both of you are okay with this.


sections:
# **************************************************************************** #
#                                                                              #
#                                Mandatory part                                #
#                                                                              #
# **************************************************************************** #

- name: Mandatory Part
  description: ''
  questions:
  - name: Error Management
    guidelines: |
      - During the defense, as soon as you need help to verify a point, the student 
      evaluated must help you.
      - git clone the student's project
      - Download the subject's data set
      - Download the student's data set or ask where the directory is located
      - Check that the signature contained in "signature.txt" is identical 
      to that of the ".zip" file of the data set.
      A simple "diff" should allow you to compare the two signatures. If necessary,
      ask the student being evaluated where their ".zip" file is located.
      - If something doesn't work as expected or the two signatures differ, the evaluation stops here.
      - If the language used is python you must check the norm (use flag if norm error)
      pip install flake8
      alias norminette_python=flake8
      norminette_python "student's project directory"

    rating: bool        # bool = YES OR NO ---- multi = up to FIVE
    kind: standard      # or bonus
    questions_skills:
    - percentage: 0
      name: Rigor
    - percentage: 0
      name: Algorithms & AI
    - percentage: 0
      name: Group & interpersonal

  - name: Part 1 Analysis of the Data Set
    guidelines: |

      Read the code, Run the code and pie chart as in the subject must appear

      <code>
      $> ./Distribution.[extension] ./Apple
      </code>

    rating: bool        # bool = YES OR NO ---- multi = up to FIVE
    kind: standard      # or bonus
    questions_skills:
    - percentage: 10
      name: Rigor
    - percentage: 10
      name: Algorithms & AI
    - percentage: 10
      name: Group & interpersonal

  - name: Part 2 Data augmentation
    guidelines: |

      Read the code, Run the code and 6 images as in the subject must appear

      <code>
      $> ./Augmentation.[extension] ./Apple/apple_healthy/image (1).JPG
      </code>

      and 6 versions of the same image must have been created

      For exemple:
      <code>
      $> ls
      image (1)_Flip.JPG
      image (1)_Rotate.JPG
      image (1)_Skew.JPG
      image (1)_Shear.JPG
      image (1)_Crop.JPG
      image (1)_Distortion.JPG
      </code>

    rating: bool        # bool = YES OR NO ---- multi = up to FIVE
    kind: standard      # or bonus
    questions_skills:
    - percentage: 10
      name: Rigor
    - percentage: 10
      name: Algorithms & AI
    - percentage: 10
      name: Group & interpersonal

  - name: Part 1 Analysis of the Data Set (additional verification)
    guidelines: |

      Now you have to use the program of the part 1 on the "augmented\_directory" of the student,
      these are the images that they must have generated with the program of the part 2
      to balance his data set in number of image, each part of the pie char must be equal.

      <code>
      $> ./Distribution.[extension] ./augmented\_directory
      </code>

      If the pie chart is still the same as above you must put 0 to this exercise and exercise Part 1 Analysis of the Data Set


    rating: bool        # bool = YES OR NO ---- multi = up to FIVE
    kind: standard      # or bonus
    questions_skills:
    - percentage: 10
      name: Rigor
    - percentage: 10
      name: Algorithms & AI
    - percentage: 10
      name: Group & interpersonal

  - name: Part 3 Image Transformation
    guidelines: |

      Read the code, Run the code and 6 images as in the subject must appear.

      <code>
      $> ./Transformation.[extension] ./Apple/apple_healthy/image (1).JPG
      </code>

      The techniques used must be able to extract the characteristics of the plants,
      you can ask for explanations on each one of the transformations
      
      
    rating: bool        # bool = YES OR NO ---- multi = up to FIVE
    kind: standard      # or bonus
    questions_skills:
    - percentage: 10
      name: Rigor
    - percentage: 10
      name: Algorithms & AI
    - percentage: 10
      name: Group & interpersonal

  - name: Part 4 Classification
    guidelines: |

      
      Ask the student to run his program on a test set of minimum 100 images,
      the result of good prediction must be over 90%.
      
    rating: bool        # bool = YES OR NO ---- multi = up to FIVE
    kind: standard      # or bonus
    questions_skills:
    - percentage: 10
      name: Rigor
    - percentage: 10
      name: Algorithms & AI
    - percentage: 10
      name: Group & interpersonal

  - name: Part 4 Classification (explanation of the model)
    guidelines: |

      
      The student must be able to explain the machine learning model he has chosen and how it works.
      - 0 if the student can't explain (think of flag cheating or Concerning situation if you have big doubt that the student did the project)
      - 5 the explanations are fluid, the student is able to explain the model and why he chose this one over another
      
    rating: multi       # bool = YES OR NO ---- multi = up to FIVE
    kind: standard      # or bonus
    questions_skills:
    - percentage: 10
      name: Rigor
    - percentage: 10
      name: Algorithms & AI
    - percentage: 10
      name: Group & interpersonal


  - name: Part 4 Classification (Unit_test1)
    guidelines: |

      Download the "test_images.zip" folder

      Take the images from the "Unit_test1" folder and give one point for each correct Apple leaf image classified.
      
      For exemple:
      <code>
      $> ./predict.[extension] ./test_images/Unit_test1/Apple_healthy1.JPG
      </code>

      Ensure that the classification matches the image name
      and replace the latter to prevent the student from accessing it.

    rating: multi        # bool = YES OR NO ---- multi = up to FIVE
    kind: standard      # or bonus
    questions_skills:
    - percentage: 20
      name: Rigor
    - percentage: 20
      name: Algorithms & AI
    - percentage: 20
      name: Group & interpersonal

  - name: Part 4 Classification (Unit_test2)
    guidelines: |

      Take the images from the "Unit_test2" folder and give one point for each correct Grape leaf image classified.
      
      For exemple:
      <code>
      $> ./predict.[extension] ./test_images/Unit_test2/Grape_spot.JPG
      </code>

      If the 10 images are misclassified, ask yourself how the student was able to get a good classification in his validation set.

    rating: multi        # bool = YES OR NO ---- multi = up to FIVE
    kind: standard      # or bonus
    questions_skills:
    - percentage: 20
      name: Rigor
    - percentage: 20
      name: Algorithms & AI
    - percentage: 20
      name: Group & interpersonal
