---

comment: ''
introduction_md: |
  - Remain polite, courteous, respectful and constructive
  throughout the evaluation process. The well-being of the community
  depends on it.

  - Identify with the person (or the group) evaluated the eventual
  dysfunctions of the work. Take the time to discuss
  and debate the problems you have identified.

  - You must consider that there might be some difference in how your
  peers might have understood the project's instructions and the
  scope of its functionalities. Always keep an open mind and grade
  him/her as honestly as possible. The pedagogy is valid only and
  only if peer-evaluation is conducted seriously.


disclaimer_md: ''

guidelines_md: |
  - Only grade the work that is in the student or group's
  GiT repository.

  - Double-check that the GiT repository belongs to the student
  or the group. Ensure that the work is for the relevant project
  and also check that "git clone" is used in an empty folder.

  - Check carefully that no malicious aliases was used to fool you
  and make you evaluate something other than the content of the
  official repository.

  - To avoid any surprises, carefully check that both the evaluating
  and the evaluated students have reviewed the possible scripts used
  to facilitate the grading.

  - If the evaluating student has not completed that particular
  project yet, it is mandatory for this student to read the
  entire subject prior to starting the defence.

  - Use the flags available on this scale to signal an empty repository,
  non-functioning program, a norm error, cheating etc. In these cases,
  the grading is over and the final grade is 0 (or -42 in case of
  cheating). However, with the exception of cheating, you are
  encouraged to continue to discuss your work (even if you have not
  finished it) in order to identify any issues that may have caused
  this failure and avoid repeating the same mistake in the future.
  
  - Remember that for the duration of the defence, no segfault,
  no other unexpected, premature, uncontrolled or unexpected
  termination of the program, else the final grade is 0. Use the
  appropriate flag. 
  You should never have to edit any file except the configuration file if it exists.
  If you want to edit a file, take the time to explicit the reasons with the 
  evaluated student and make sure both of you are okay with this.

  - You must also verify the absence of memory leaks. Any memory allocated on the heap must
  be properly freed before the end of execution.
  You are allowed to use any of the different tools available on the computer, such as
  leaks, valgrind, or e_fence. In case of memory leaks, tick the appropriate flag.

sections:


# **************************************************************************** #
#                                                                              #
#                                General instructions                          #
#                                                                              #
# **************************************************************************** #

- name: General instructions
  description: ""
  questions:
  - name: General instructions
    guidelines: |
        - For the entire evaluation process, if you don't know how to check a 
          requirement, or verify anything, the evaluated student has to help you. 
        - Ensure that all the files required to configure the application are 
          located inside a srcs folder. The srcs folder must be located at the 
          root of the repository.
        - Before starting the evaluation, run this command in the terminal:
          "docker stop $(docker ps -qa); docker rm $(docker ps -qa);
          docker rmi -f $(docker images -qa); docker volume rm $(docker volume ls -q);
          docker network rm $(docker network ls -q) 2>/dev/null"
        - Read the docker-compose.yml file. There musn't be 'network: host' in 
          it or 'links:'. Otherwise, the evaluation ends now.
        - Read the docker-compose.yml file. There must be 'network(s)' in it. 
          Otherwise, the evaluation ends now.
        - Examine the Makefile and all the scripts in which Docker is used. 
          There musn't be '--link' in any of them. Otherwise, the evaluation 
          ends now.
        - Examine the Dockerfiles. If you see 'tail -f' or any command run in 
          background in any of them in the ENTRYPOINT section, the evaluation 
          ends now. Same thing if 'bash' or 'sh' are used but not for running a 
          script (e.g, 'bash').
        - If the entrypoint is a script (e.g., ENTRYPOINT ["sh", "my_entrypoint.sh"], 
          ENTRYPOINT ["bash", "my_entrypoint.sh"]), ensure it runs no program  
          in background (e.g, 'nginx & bash').
        - Examine all the scripts in the repository. Ensure none of them runs 
          an infinite loop. 
          The following are a few examples of prohibited commands: 
          'sleep infinity', 'tail -f /dev/null', 'tail -f /dev/random'
        - Run the Makefile.

    rating: bool
    kind: standard
    questions_skills:
    - percentage: 0
      name: Rigor
    - percentage: 0
      name: Algorithms & AI
    - percentage: 0
      name: DB & Data

# **************************************************************************** #
#                                                                              #
#                                Mandatory part                                #
#                                                                              #
# **************************************************************************** #
- name: Mandatory part
  description: ''
  questions:
  - name: Ex00 Create postgres
    guidelines: |


      You will be able to connect to the student's database with his or her login:
      
      <code>
      psql -U your_login -d piscineds -h localhost -W
      mysecretpassword
      </code>

    rating: bool        # bool = YES OR NO ---- multi = up to FIVE
    kind: standard      # or bonus
    questions_skills:
    - percentage: 20
      name: Rigor
    - percentage: 20
      name: Algorithms & AI
    - percentage: 20
      name: DB & Data

  - name: Ex01 Show me your DB
    guidelines: |

      Ask to be shown the connection with the DB,
      the port used must be the same as on the command of the previous exercise

      Attention if the connection with the DB does not work, the evaluation stops here

    rating: bool        # bool = YES OR NO ---- multi = up to FIVE
    kind: standard      # or bonus
    questions_skills:
    - percentage: 20
      name: Rigor
    - percentage: 20
      name: Algorithms & AI
    - percentage: 20
      name: DB & Data

  - name: Ex02 First table
    guidelines: |

      Run table.* and see if the table is created with the software from the previous exercise

      The table must have at least 6 different types, the columns must have the same name as in the CSV:
      event_time,event_type,product_id,price,user_id,user_session

      A DATETIME for the first column (event_time) is mandatory


    rating: bool        # bool = YES OR NO ---- multi = up to FIVE
    kind: standard      # or bonus
    questions_skills:
    - percentage: 20
      name: Rigor
    - percentage: 20
      name: Algorithms & AI
    - percentage: 20
      name: DB & Data

  - name: Ex03 items table
    guidelines: |

      Run item_table.* and see if the items table is created with the software from Ex01

      The table must have at least 3 different types, the columns must have the same name as in the CSV:
      product_id,category_id,category_code,brand
      
    rating: bool        # bool = YES OR NO ---- multi = up to FIVE
    kind: standard      # or bonus
    questions_skills:
    - percentage: 20
      name: Rigor
    - percentage: 20
      name: Algorithms & AI
    - percentage: 20
      name: DB & Data

  - name: Ex04 automatic table
    guidelines: |

      The evaluation must be done with the file "eval.zip" which you will find at the top of the evaluation page, unzip the file

      Run automatic_table.* and see if the 5 tables is created with the software from Ex01
      The tables must have the following names: data_2022_oct, data_2022_nov, data_2022_dec, data_2023_jan, data_2023_fev
      Make sure that the table data_2023_feb has been created

      The 5 tables must have at least 6 different types, the columns must have the same name as in the CSV:
      event_time,event_type,product_id,price,user_id,user_session

      A DATETIME for the first column (event_time) is mandatory
      
    rating: bool        # bool = YES OR NO ---- multi = up to FIVE
    kind: standard      # or bonus
    questions_skills:
    - percentage: 20
      name: Rigor
    - percentage: 20
      name: Algorithms & AI
    - percentage: 20
      name: DB & Data
